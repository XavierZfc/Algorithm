class Solution {
    public int[] singleNumbers(int[] nums) {

        /**
         * 本题的思路是使用 异或
         * 因为2个一样的数字异或以后为 0
         * 所以
         * 1. 我们把整个数组来进行异或，最终形成的是我们要找的两个数字的异或之值
         * 2. 因为是两个数字的异或，在结果中某一位为 1 时，一定是一个数字为 0 ，另一个一定是 1
         * 3. 找到两个数字中异或中的 1 所在的位置，我们这里找最后一个1的位置，我们用point变量来进行存储
         * 4. 用 point 与数组中每一个来进行与运算，如果是 1 ，那么就将他与 a 进行异或，否则与 b 来进行异或
         *    因为数组中其他的数字都有两个，同时这两个数组与point异或时结果相同，所以不会影响 a,b 的值
         */
        //将所有的数字异或
        int val = 0 ;
        for(int num : nums){
            val ^= num ;
        }

        //找到val中最后一个1的位置
        int point = 1;
        while((val & point) != 1){
            point <<= 1;
        }

        //如果point与num相与为1，那么就让他与 a 相与，否则与 b 相与
        int a=0 , b=0 ;
        for(int num : nums ){
            if((point & num) == 1){
                a ^= num ;
            }else {
                b ^= num ;
            }
        }
        return new int[]{a,b};
    }
}
